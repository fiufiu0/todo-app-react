[{"C:\\react\\todo-app\\src\\index.js":"1","C:\\react\\todo-app\\src\\App.js":"2","C:\\react\\todo-app\\src\\reportWebVitals.js":"3","C:\\react\\todo-app\\src\\components\\Header.js":"4","C:\\react\\todo-app\\src\\components\\Checkbox.js":"5","C:\\react\\todo-app\\src\\components\\ButtonX.js":"6","C:\\react\\todo-app\\src\\containers\\TodoList.js":"7","C:\\react\\todo-app\\src\\containers\\TodoRow.js":"8","C:\\react\\todo-app\\src\\containers\\TodoAdd.js":"9","C:\\react\\todo-app\\src\\containers\\TodoFilter.js":"10"},{"size":500,"mtime":1612366643715,"results":"11","hashOfConfig":"12"},{"size":2693,"mtime":1622992312217,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":122,"mtime":1622977898312,"results":"15","hashOfConfig":"12"},{"size":154,"mtime":1622977898311,"results":"16","hashOfConfig":"12"},{"size":115,"mtime":1622985530673,"results":"17","hashOfConfig":"12"},{"size":1129,"mtime":1623001857743,"results":"18","hashOfConfig":"12"},{"size":1918,"mtime":1623004541997,"results":"19","hashOfConfig":"12"},{"size":669,"mtime":1622992316417,"results":"20","hashOfConfig":"12"},{"size":531,"mtime":1622984274456,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"56rgg0",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\react\\todo-app\\src\\index.js",[],["44","45"],"C:\\react\\todo-app\\src\\App.js",["46"],"import * as React from 'react';\r\nimport './App.css'\r\nimport Header from './components/Header';\r\nimport TodoList from './containers/TodoList';\r\nimport TodoAdd from './containers/TodoAdd';\r\nimport TodoFilter from './containers/TodoFilter';\r\n\r\nfunction useLocalStorageState(key, defaultValue) {\r\n  const [value, setValue] = React.useState(() => {\r\n    const valueFromLocalStorage = window.localStorage.getItem(key);\r\n    if (valueFromLocalStorage) {\r\n      return JSON.parse(valueFromLocalStorage);\r\n    }\r\n    return typeof defaultValue === 'function' ? defaultValue() : defaultValue;\r\n  });\r\n  React.useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(value));\r\n  }, [value, key]);\r\n  return [value, setValue];\r\n}\r\n\r\nfunction useFetch(url) {\r\n  const [data, setData] = React.useState([]);\r\n  React.useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const response = await fetch(url)\r\n        const jsonData = await response.json();\r\n        setData(jsonData);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n\r\n    }\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return data;\r\n}\r\n\r\n\r\nfunction App() {\r\n  const [itemList, updateItemList] = useLocalStorageState(\"myKey\", []);\r\n  const [lastId, setLastId] = useLocalStorageState(\"lastId\", 0);\r\n  const [currentItem, setCurrentItem] = React.useState(\"\");\r\n  const [filter, setFilter] = React.useState('all');\r\n  const apiUrl = \"https://jsonplaceholder.typicode.com/users/1/todos\";\r\n  const data = useFetch(apiUrl);\r\n  const memoValue = React.useMemo(() => {\r\n    const newData = data.map((el) => {\r\n      const newEl = {\r\n        index: el.id,\r\n        completed: el.completed,\r\n        item: el.title,\r\n      };\r\n      return newEl;\r\n    });\r\n    return newData;\r\n  }, [data])\r\n\r\n  React.useEffect(() => {\r\n    if (itemList.length === 0) {\r\n      setLastId(memoValue.length + 1);\r\n      updateItemList(memoValue);\r\n    }\r\n  }, [memoValue, setLastId, updateItemList, itemList])\r\n\r\n  const addItemToList = () => {\r\n    updateItemList([...itemList, {\r\n      item: currentItem, completed: false, index: Math.floor(Math.random() * 10000)\r\n    }]);\r\n    setCurrentItem(\"\");\r\n  };\r\n\r\n  const clearTodo = () => {\r\n    updateItemList([]);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"App\">\r\n        <Header />\r\n        <TodoAdd isReady={memoValue.length >= 0} addTodo={addItemToList} clearTodo={clearTodo} currentItem={currentItem} setCurrentItem={setCurrentItem} />\r\n        <TodoFilter filter={filter} setFilter={setFilter} />\r\n        <TodoList itemList={itemList} updateItemList={updateItemList} filter={filter} />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;","C:\\react\\todo-app\\src\\reportWebVitals.js",[],"C:\\react\\todo-app\\src\\components\\Header.js",[],"C:\\react\\todo-app\\src\\components\\Checkbox.js",[],"C:\\react\\todo-app\\src\\components\\ButtonX.js",[],"C:\\react\\todo-app\\src\\containers\\TodoList.js",[],"C:\\react\\todo-app\\src\\containers\\TodoRow.js",["47"],"C:\\react\\todo-app\\src\\containers\\TodoAdd.js",[],"C:\\react\\todo-app\\src\\containers\\TodoFilter.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":44,"column":10,"nodeType":"54","messageId":"55","endLine":44,"endColumn":16},{"ruleId":"52","severity":1,"message":"56","line":30,"column":12,"nodeType":"54","messageId":"55","endLine":30,"endColumn":17},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'lastId' is assigned a value but never used.","Identifier","unusedVar","'state' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]