[{"C:\\react\\todo-app\\src\\index.js":"1","C:\\react\\todo-app\\src\\App.js":"2","C:\\react\\todo-app\\src\\components\\Header.js":"3","C:\\react\\todo-app\\src\\components\\Checkbox.js":"4","C:\\react\\todo-app\\src\\components\\ButtonX.js":"5","C:\\react\\todo-app\\src\\containers\\TodoList.js":"6","C:\\react\\todo-app\\src\\containers\\TodoRow.js":"7","C:\\react\\todo-app\\src\\containers\\TodoAdd.js":"8","C:\\react\\todo-app\\src\\containers\\TodoFilter.js":"9","C:\\react\\todo-app\\src\\components\\PublicPage.js":"10","C:\\react\\todo-app\\src\\components\\AuthProvider.js":"11","C:\\react\\todo-app\\src\\components\\Todos.js":"12","C:\\react\\todo-app\\src\\context\\Context.js":"13"},{"size":1144,"mtime":1627927786301,"results":"14","hashOfConfig":"15"},{"size":2657,"mtime":1623846133231,"results":"16","hashOfConfig":"15"},{"size":122,"mtime":1622977898312,"results":"17","hashOfConfig":"15"},{"size":154,"mtime":1622977898311,"results":"18","hashOfConfig":"15"},{"size":115,"mtime":1622985530673,"results":"19","hashOfConfig":"15"},{"size":1129,"mtime":1623001857743,"results":"20","hashOfConfig":"15"},{"size":2016,"mtime":1623675182230,"results":"21","hashOfConfig":"15"},{"size":669,"mtime":1623503338954,"results":"22","hashOfConfig":"15"},{"size":531,"mtime":1622984274456,"results":"23","hashOfConfig":"15"},{"size":434,"mtime":1623503166484,"results":"24","hashOfConfig":"15"},{"size":110,"mtime":1623064173939,"results":"25","hashOfConfig":"15"},{"size":502,"mtime":1623680834337,"results":"26","hashOfConfig":"15"},{"size":926,"mtime":1623680950240,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"56rgg0",{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"C:\\react\\todo-app\\src\\index.js",[],"C:\\react\\todo-app\\src\\App.js",["57"],"import * as React from 'react';\r\nimport './App.css'\r\nimport Header from './components/Header';\r\nimport TodoList from './containers/TodoList';\r\nimport TodoAdd from './containers/TodoAdd';\r\nimport TodoFilter from './containers/TodoFilter';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { myDataContext, useLocalStorageState } from './context/Context';\r\n\r\n// usunięty localstorage do contextu (błędy)\r\n\r\nfunction useFetch(url) {\r\n  const [data, setData] = React.useState([]);\r\n  React.useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const response = await fetch(url)\r\n        const jsonData = await response.json();\r\n        setData(jsonData);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n\r\n    }\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return data;\r\n}\r\n\r\n\r\nfunction App(props) {\r\n  // const [itemList, updateItemList] = useLocalStorageState(\"myKey\", []);\r\n  const [lastId, setLastId] = useLocalStorageState(\"lastId\", 0);\r\n  const { itemList, updateItemList } = React.useContext(myDataContext);\r\n  const [currentItem, setCurrentItem] = React.useState(\"\");\r\n  const [filter, setFilter] = React.useState('all');\r\n  const apiUrl = \"https://jsonplaceholder.typicode.com/users/1/todos\";\r\n  const data = useFetch(apiUrl);\r\n\r\n  const memoValue = React.useMemo(() => {\r\n    const newData = data.map((el) => {\r\n      const newEl = {\r\n        index: el.id,\r\n        completed: el.completed,\r\n        item: el.title,\r\n      };\r\n      return newEl;\r\n    });\r\n    return newData;\r\n  }, [data])\r\n\r\n  React.useEffect(() => {\r\n    if (itemList.length === 0) {\r\n      setLastId(memoValue.length + 1);\r\n      updateItemList(memoValue);\r\n    }\r\n  }, [memoValue, setLastId, updateItemList, itemList])\r\n\r\n  const addItemToList = () => {\r\n    updateItemList([...itemList, {\r\n      item: currentItem, completed: false, index: Math.floor(Math.random() * 10000)\r\n    }]);\r\n    setCurrentItem(\"\");\r\n  };\r\n\r\n  const clearTodo = () => {\r\n    updateItemList([]);\r\n  }\r\n\r\n  if (!props.isLogged) {\r\n    return (\r\n      <Redirect to={{ pathname: \"/\" }} />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n        <button onClick={() => { props.setIsLogged(false) }}>Wyloguj</button>\r\n      </div>\r\n      <div className=\"App\">\r\n        <Header />\r\n        <TodoAdd isReady={memoValue.length >= 0} addTodo={addItemToList} clearTodo={clearTodo} currentItem={currentItem} setCurrentItem={setCurrentItem} />\r\n        <TodoFilter filter={filter} setFilter={setFilter} />\r\n        <TodoList itemList={itemList} updateItemList={updateItemList} filter={filter} />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;",["58","59"],"C:\\react\\todo-app\\src\\components\\Header.js",[],"C:\\react\\todo-app\\src\\components\\Checkbox.js",[],"C:\\react\\todo-app\\src\\components\\ButtonX.js",[],"C:\\react\\todo-app\\src\\containers\\TodoList.js",[],"C:\\react\\todo-app\\src\\containers\\TodoRow.js",["60"],"import * as React from 'react';\r\nimport Checkbox from '../components/Checkbox';\r\nimport ButtonX from '../components/ButtonX';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction TodoRow({ deleteItem, toggleCompleted, itemObject, index }) {\r\n\r\n    const initialState = {\r\n        check: false,\r\n    };\r\n\r\n    const reducer = (state, action) => {\r\n\r\n        console.log(' > state log', state);\r\n        console.log(' > action log', action);\r\n\r\n        switch (action.type) {\r\n            case 'DELETE':\r\n                deleteItem(action.payload);\r\n                return state;\r\n            default:\r\n                return state;\r\n        }\r\n    }\r\n\r\n    const [state, dispatch] = React.useReducer(reducer, initialState);\r\n    const history = useHistory();\r\n    // console.log(history);\r\n    const openTodo = () => history.push(`todos/${itemObject.index}`);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div key={itemObject + index} className=\"itemContainer\">\r\n                <p>{itemObject.item}</p>\r\n                <div>\r\n                    <Checkbox onChange={() => toggleCompleted(itemObject.index)} checked={itemObject.completed} />\r\n                    <ButtonX onClick={() => dispatch({ type: 'DELETE', payload: itemObject })} />\r\n                    <button onClick={openTodo}>OPEN</button>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n// ZAPASOWE BEZ USEREDUCER\r\n\r\n// function TodoRow({ deleteItem, toggleCompleted, itemObject, index }) {\r\n\r\n//     return (\r\n//         <React.Fragment>\r\n//             <div key={itemObject + index} className=\"itemContainer\">\r\n//                 <p>{itemObject.item}</p>\r\n//                 <div>\r\n//                     <Checkbox onChange={() => toggleCompleted(itemObject.index)} checked={itemObject.completed} />\r\n//                     <ButtonX onClick={() => deleteItem(itemObject)} />\r\n//                 </div>\r\n//             </div>\r\n//         </React.Fragment>\r\n//     )\r\n// }\r\n\r\nexport default TodoRow;","C:\\react\\todo-app\\src\\containers\\TodoAdd.js",[],"C:\\react\\todo-app\\src\\containers\\TodoFilter.js",[],"C:\\react\\todo-app\\src\\components\\PublicPage.js",[],"C:\\react\\todo-app\\src\\components\\AuthProvider.js",[],"C:\\react\\todo-app\\src\\components\\Todos.js",[],"C:\\react\\todo-app\\src\\context\\Context.js",[],{"ruleId":"61","severity":1,"message":"62","line":34,"column":10,"nodeType":"63","messageId":"64","endLine":34,"endColumn":16},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"61","severity":1,"message":"69","line":26,"column":12,"nodeType":"63","messageId":"64","endLine":26,"endColumn":17},"no-unused-vars","'lastId' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["70"],"no-negated-in-lhs",["71"],"'state' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]